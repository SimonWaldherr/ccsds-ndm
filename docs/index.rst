CCSDS Navigation Data Messages (NDM) Read/Write
=================================================

Description
--------------
The Consultative Committee for Space Data Systems (CCSDS) develops communications and data systems standards
for spaceflight. `CCSDS Navigation Data Messages (NDM) <https://public.ccsds.org/Publications/MOIMS.aspx>`_
is the set of file standards to define common data types such as trajectory, orbit, attitude and conjunction events.
These data types are routinely generated and exchanged within and between spacecraft operators, space agencies,
researchers, amateurs and commercial companies. As such, accurate definition and common interpretation of the data
is crucial (and sometimes mission-critical).

The standard description for each data type is encapsulated in an XML Schema file. This project `ccsds-ndm` aims to
be the reference open-source Python implementation to read and write the NDM XML files, through an object tree
API, auto-generated by these schema files.

Source code is `on Github <https://github.com/egemenimre/ccsds-ndm>`_

Usage and Examples
-------------------

There are two use cases:
- The `ccsds-ndm` library reads the NDM file, fills an object tree and offers it to the users. The users will then
have to fill their own attitude, orbit or trajectory objects used in their libraries.
- The user fills an object tree from their own attitude, orbit or trajectory object. The `ccsds-ndm` library
writes the NDM file using this object tree.

For the first use case, reading an OEM file from `xml_read_path` is as simple as
(file type is inferred automatically):

>>> cdm = NdmIo().from_path(xml_read_path)

The output `cdm` is the object tree for a Conjunction Data Message (CDM). The contents can then be reached
going deeper in the object tree. This example shows how to reach the orbit normal position component
of the relative state vector:

>>> print(cdm.body.relative_metadata_data.relative_state_vector.relative_position_n)

Finally, once filled with the relevant data, the `cdm` object can be written to `xml_write_path` with:

>>> NdmIo().to_file(cdm, xml_write_path)

The `ndm` object trees are not very user friendly and most probably will have to be filled by the users'
own equivalent objects (trajectory, orbit, attitude etc.).


.. toctree::
    :maxdepth: 2

    ndmio.rst
    more_info.rst
    ndmclasses.rst

Indices and Tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`